-- Database: ProyectoBDD
 -- DROP DATABASE IF EXISTS "ProyectoBDD";

CREATE DATABASE "ProyectoBDD" WITH OWNER = POSTGRES ENCODING = 'UTF8' LC_COLLATE = 'Spanish_Mexico.1252' LC_CTYPE = 'Spanish_Mexico.1252' LOCALE_PROVIDER = 'libc' TABLESPACE = PG_DEFAULT CONNECTION
LIMIT = -1 IS_TEMPLATE = FALSE;


-- Database: ProyectoBDD

-- DROP DATABASE IF EXISTS "ProyectoBDD";
DROP TABLE IF EXISTS EMPLEADO CASCADE;
DROP TABLE IF EXISTS TELEFONOS CASCADE;
DROP TABLE IF EXISTS COCINERO CASCADE;
DROP TABLE IF EXISTS MESERO CASCADE;
DROP TABLE IF EXISTS ADMINISTRATIVO CASCADE;
DROP TABLE IF EXISTS PRODUCTO CASCADE;
DROP TABLE IF EXISTS PLATILLO CASCADE;
DROP TABLE IF EXISTS BEBIDA CASCADE;
DROP TABLE IF EXISTS CATEGORIA CASCADE;
DROP TABLE IF EXISTS PERTENECE CASCADE;
DROP TABLE IF EXISTS asegurado CASCADE;
DROP TABLE IF EXISTS comanda CASCADE;
DROP TABLE IF EXISTS factura CASCADE;
DROP TABLE IF EXISTS metodo_pago CASCADE;


CREATE DATABASE "ProyectoBDD"
    WITH
    OWNER = postgres
    ENCODING = 'UTF8'
    LC_COLLATE = 'Spanish_Mexico.1252'
    LC_CTYPE = 'Spanish_Mexico.1252'
    LOCALE_PROVIDER = 'libc'
    TABLESPACE = pg_default
    CONNECTION LIMIT = -1
    IS_TEMPLATE = False;

------------------------ CREACION DE TABLAS----------------
CREATE TABLE EMPLEADO(
    NO_EMPLEADO SMALLINT,
    RFC CHAR(13),
    EDAD SMALLINT,
    SUELDO NUMERIC(8,2),
    AP_PAT VARCHAR(100),
    AP_MAT VARCHAR(100) NULL,
    DOMICILIO TEXT,
    F_NACIMIENTO DATE,
    FOTO BYTEA
);
ALTER TABLE EMPLEADO ADD CONSTRAINT UQ_NEMPLEADO UNIQUE (NO_EMPLEADO);

CREATE TABLE TELEFONOS(
    TELEFONO CHAR(10),
    NO_EMPLEADO SMALLINT
);

CREATE TABLE COCINERO(
    NO_EMPLEADO SMALLINT,
    ESPECIALIDAD VARCHAR(100)
);

CREATE TABLE MESERO(
    NO_EMPLEADO SMALLINT,
    HORARIO TIME
);

CREATE TABLE ADMINISTRATIVO(
    NO_EMPLEADO SMALLINT,
    ROL VARCHAR(100)
);

CREATE TABLE PRODUCTO(
    ID_PRODUCTO SMALLINT,
    PRECIO_ARTICULO NUMERIC(8,2)NULL,
    DESCRIPCION TEXT NULL,
    RECETA TEXT NULL,
    DISPONIBILIDAD INT NULL, 
    NOMBRE_PROD VARCHAR(100) NULL,
    NOMBRE_CAT VARCHAR(100),
    TIPO CHAR(1) NULL
);
ALTER TABLE CATEGORIA ADD CONSTRAINT NOMBRE_CAT_UNIQUE UNIQUE (NOMBRE_CAT);

CREATE TABLE PLATILLO(
    ID_PRODUCTO SMALLINT
);

CREATE TABLE BEBIDA(
    ID_PRODUCTO SMALLINT
);

CREATE TABLE CATEGORIA(
    NOMBRE_CAT VARCHAR(100),
    DESCRIPCION_CAT TEXT
);
INSERT INTO CATEGORIA VALUES('B', 'ES BEBIDA');
CREATE TABLE PERTENECE (
    ID_PRODUCTO SMALLINT,
    FOLIO VARCHAR(20),
    TOTAL_PARCIAL_COMANDA NUMERIC(8,2)
);
INSERT INTO CATEGORIA (NOMBRE_CAT, DESCRIPCION_CAT) 
VALUES ('Platillo', 'Categoría de platillos'),
       ('Bebida', 'Categoría de bebidas');


CREATE TABLE PERTENECE (
    ID_PRODUCTO SMALLINT,
    FOLIO VARCHAR(20),
    TOTAL_PARCIAL_COMANDA NUMERIC(8,2)
);

CREATE TABLE asegurado(
    no_empleado SMALLINT NULL, 
    curp CHAR(18),
    nombre_asegurado VARCHAR(100) NULL,
    parentesco VARCHAR(50) NULL
);

CREATE TABLE comanda(
    folio VARCHAR(20),
    dia CHAR(2) NOT NULL,
    hora TIME NOT NULL,
    cantidadParcial_articulo NUMERIC(8,2),
    total_comanda NUMERIC(8,2), 
    no_Empleado SMALLINT NOT NULL,
    folio_Factura VARCHAR(20) NOT NULL
);
ALTER TABLE COMANDA ADD CONSTRAINT UQ_FOLIO UNIQUE(FOLIO)

CREATE TABLE factura(
    folio_factura VARCHAR(20),
    domicilio_fiscal TEXT NOT NULL,  
    razon_social VARCHAR(50) NOT NULL,
    rfc CHAR(13)
);
ALTER TABLE FACTURA ADD CONSTRAINT UQ_FFACTURA UNIQUE (FOLIO_FACTURA);

CREATE TABLE metodo_pago(
    tipo_pago VARCHAR(50),
    folio_factura VARCHAR(20) NOT NULL
);
-------------------------------------------------------------------------
-------------------------------------------------------------------------
----------------------DEFINICION DE CONSTRAINT--------------------------

ALTER TABLE EMPLEADO ADD CONSTRAINT PK_NEMPLEADO PRIMARY KEY (NO_EMPLEADO);
ALTER TABLE EMPLEADO ADD CONSTRAINT UQ_RFC UNIQUE (RFC);

ALTER TABLE TELEFONOS ADD CONSTRAINT PK_TELEFONO PRIMARY KEY (TELEFONO);
ALTER TABLE TELEFONOS ADD CONSTRAINT FK_EMP_TEL FOREIGN KEY (NO_EMPLEADO) REFERENCES EMPLEADO(NO_EMPLEADO) ON DELETE CASCADE;

ALTER TABLE COCINERO ADD CONSTRAINT PK_COCINERO_NEMPLEADO PRIMARY KEY (NO_EMPLEADO);
ALTER TABLE MESERO ADD CONSTRAINT PK_MESERO_NEMPLEADO PRIMARY KEY (NO_EMPLEADO);
ALTER TABLE ADMINISTRATIVO ADD CONSTRAINT PK_ADMIN_NEMPLEADO PRIMARY KEY (NO_EMPLEADO);



ALTER TABLE PRODUCTO ADD CONSTRAINT ID_PRODUCTO_PK PRIMARY KEY (ID_PRODUCTO);
ALTER TABLE PRODUCTO ADD CONSTRAINT PROD_NOMCAT_FK FOREIGN KEY (NOMBRE_CAT) REFERENCES CATEGORIA(NOMBRE_CAT);
ALTER TABLE PRODUCTO ADD CONSTRAINT TIPO_CK CHECK (TIPO IN ('B', 'P'));

ALTER TABLE PLATILLO ADD CONSTRAINT PROD_PLAT_FK FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO);


ALTER TABLE BEBIDA ADD CONSTRAINT PROD_BEB_FK FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO);
ALTER TABLE BEBIDA ADD CONSTRAINT BEB_CK CHECK (TIPO = 'B');

ALTER TABLE CATEGORIA ADD CONSTRAINT NOMBRE_CAT_PK PRIMARY KEY (NOMBRE_CAT);

ALTER TABLE PERTENECE ADD CONSTRAINT ID_P_FOL_PK PRIMARY KEY (ID_PRODUCTO, FOLIO);
ALTER TABLE PERTENECE ADD CONSTRAINT FK_PERTENECE_PRODUCTO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTO(ID_PRODUCTO);
ALTER TABLE PERTENECE ADD CONSTRAINT FK_PERTENECE_COMANDA FOREIGN KEY (FOLIO) REFERENCES COMANDA(FOLIO);

ALTER TABLE asegurado ADD CONSTRAINT PK_ASEGURADO PRIMARY KEY (CURP);

ALTER TABLE comanda ADD CONSTRAINT PK_FOLIO PRIMARY KEY (FOLIO);
ALTER TABLE comanda ADD CONSTRAINT FK_EMPLEADO FOREIGN KEY (NO_EMPLEADO) REFERENCES EMPLEADO(NO_EMPLEADO) ON DELETE CASCADE;
ALTER TABLE comanda ADD CONSTRAINT FK_FACTURA FOREIGN KEY (FOLIO_FACTURA) REFERENCES FACTURA(FOLIO_FACTURA) ON DELETE CASCADE;

ALTER TABLE factura ADD CONSTRAINT PK_FACTURA PRIMARY KEY (FOLIO_FACTURA);

ALTER TABLE metodo_pago ADD CONSTRAINT PK_PAGO PRIMARY KEY (TIPO_PAGO);
ALTER TABLE metodo_pago ADD CONSTRAINT FK_PAGO FOREIGN KEY (FOLIO_FACTURA) REFERENCES FACTURA(FOLIO_FACTURA) ON DELETE CASCADE;
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------
--------------------------INSERSION DE REGISTROS----------------------------------------
-----------------------------------------------------------------------------------------

-- Insertar un empleado que también es un mesero
INSERT INTO EMPLEADO (NO_EMPLEADO, RFC, EDAD, SUELDO, AP_PAT, AP_MAT, DOMICILIO, F_NACIMIENTO, FOTO) 
VALUES (1, 'ABC1234567890', 30, 2000.00, 'González', 'López', 'Calle 123, Ciudad', '1994-05-10', NULL);

INSERT INTO MESERO (NO_EMPLEADO, HORARIO) 
VALUES (1, '08:00:00');

-- Insertar un empleado que también es un cocinero
INSERT INTO EMPLEADO (NO_EMPLEADO, RFC, EDAD, SUELDO, AP_PAT, AP_MAT, DOMICILIO, F_NACIMIENTO, FOTO) 
VALUES (2, 'DEF1234567890', 35, 2500.00, 'Martínez', 'García', 'Av. Principal 456, Pueblo', '1989-12-15', NULL);

INSERT INTO COCINERO (NO_EMPLEADO, ESPECIALIDAD) 
VALUES (2, 'Parrilla');

-- Insertar un empleado que también es un administrativo
INSERT INTO EMPLEADO (NO_EMPLEADO, RFC, EDAD, SUELDO, AP_PAT, AP_MAT, DOMICILIO, F_NACIMIENTO, FOTO) 
VALUES (3, 'GHI1234567890', 28, 1800.00, 'López', 'Sánchez', 'Col. Libertad, Municipio', '1996-08-22', NULL);

INSERT INTO ADMINISTRATIVO (NO_EMPLEADO, ROL) 
VALUES (3, 'Recursos Humanos');

SELECT EMPLEADO.NO_EMPLEADO, EMPLEADO.AP_PAT, EMPLEADO.AP_MAT
FROM EMPLEADO
INNER JOIN MESERO ON EMPLEADO.NO_EMPLEADO = MESERO.NO_EMPLEADO
WHERE MESERO.HORARIO = '08:00:00';

-- Insertar tres platillos
INSERT INTO PRODUCTO (ID_PRODUCTO, PRECIO_ARTICULO, DESCRIPCION, RECETA, DISPONIBILIDAD, NOMBRE_PROD, NOMBRE_CAT, TIPO) 
VALUES (1, 12.50, 'Tacos al pastor', 'Receta de tacos al pastor...', NULL, 'Tacos al pastor', 'Platillo', 'P');

INSERT INTO PLATILLO (ID_PRODUCTO) 
VALUES (1);

INSERT INTO PRODUCTO (ID_PRODUCTO, PRECIO_ARTICULO, DESCRIPCION, RECETA, DISPONIBILIDAD, NOMBRE_PROD, NOMBRE_CAT, TIPO) 
VALUES (2, 9.99, 'Enchiladas verdes', 'Receta de enchiladas verdes...', NULL, 'Enchiladas verdes', 'Platillo', 'P');

INSERT INTO PLATILLO (ID_PRODUCTO) 
VALUES (2);

INSERT INTO PRODUCTO (ID_PRODUCTO, PRECIO_ARTICULO, DESCRIPCION, RECETA, DISPONIBILIDAD, NOMBRE_PROD, NOMBRE_CAT, TIPO) 
VALUES (3, 15.75, 'Pozole rojo', 'Receta de pozole rojo...', NULL, 'Pozole rojo', 'Platillo', 'P');

INSERT INTO PLATILLO (ID_PRODUCTO) 
VALUES (3);

-- Insertar tres bebidas
INSERT INTO PRODUCTO (ID_PRODUCTO, PRECIO_ARTICULO, DESCRIPCION, RECETA, DISPONIBILIDAD, NOMBRE_PROD, NOMBRE_CAT, TIPO) 
VALUES (4, 2.50, 'Agua de horchata', NULL, NULL, 'Agua de horchata', 'Bebida', 'B');
UPDATE PRODUCTO 
SET DISPONIBILIDAD = 1 
WHERE TIPO = 'B';


INSERT INTO BEBIDA (ID_PRODUCTO) 
VALUES (4);

INSERT INTO PRODUCTO (ID_PRODUCTO, PRECIO_ARTICULO, DESCRIPCION, RECETA, DISPONIBILIDAD, NOMBRE_PROD, NOMBRE_CAT, TIPO) 
VALUES (5, 3.00, 'Refresco de cola', NULL, NULL, 'Refresco de cola', 'Bebida', 'B');
SELECT * FROM PRODUCTO
INSERT INTO BEBIDA (ID_PRODUCTO) 
VALUES (5);

INSERT INTO PRODUCTO (ID_PRODUCTO, PRECIO_ARTICULO, DESCRIPCION, RECETA, DISPONIBILIDAD, NOMBRE_PROD, NOMBRE_CAT, TIPO) 
VALUES (6, 4.50, 'Café americano', NULL, NULL, 'Café americano', 'Bebida', 'B');

INSERT INTO BEBIDA (ID_PRODUCTO) 
VALUES (6);



-------------------------FACTURA Y COMANDA------------------------------

INSERT INTO COMANDA (FOLIO, DIA, HORA, CANTIDADPARCIAL_ARTICULO, TOTAL_COMANDA, NO_EMPLEADO, FOLIO_FACTURA)
VALUES ('001', '15', '12:30:00', 2, 25.00, 1, 'F001'),
       ('002', '15', '13:45:00', 1, 10.00, 2, 'F002'),
       ('003', '15', '14:20:00', 3, 35.50, 3, 'F003');
SELECT * FROM COMANDA;
-- Insertar registros en factura
INSERT INTO FACTURA (FOLIO_FACTURA, DOMICILIO_FISCAL, RAZON_SOCIAL, RFC)
VALUES ('F001', 'Calle Principal 123, Ciudad', 'Restaurante XYZ', 'ABC123456789'),
       ('F002', 'Av. Independencia 456, Pueblo', 'Restaurante ABC', 'DEF987654321'),
       ('F003', 'Col. Centro 789, Municipio', 'Restaurante 123', 'GHI456789012');
SELECT FACTURA.DOMICILIO_FISCAL
FROM COMANDA
JOIN FACTURA ON COMANDA.FOLIO_FACTURA = FACTURA.FOLIO_FACTURA
WHERE COMANDA.HORA = '12:30:00';

-- Trigger para actualizar totales
CREATE OR REPLACE FUNCTION actualizar_totales_comanda()
RETURNS TRIGGER AS $$
BEGIN
    -- Calcular el total parcial por producto y actualizar en la tabla PRODUCTO
    UPDATE PRODUCTO
    SET DISPONIBILIDAD = DISPONIBILIDAD - NEW.cantidadParcial_articulo
    WHERE ID_PRODUCTO = ID_PRODUCTO;

    -- Calcular el total de la comanda y actualizar en la tabla COMANDA
    UPDATE COMANDA
    SET TOTAL_COMANDA = (
        SELECT SUM(TOTAL_PARCIAL_COMANDA)
        FROM PERTENECE
        WHERE FOLIO = NEW.FOLIO
    )
    WHERE FOLIO = NEW.FOLIO;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER actualizar_totales_trigger
AFTER INSERT ON COMANDA
FOR EACH ROW
EXECUTE FUNCTION actualizar_totales_comanda();

DROP TRIGGER actualizar_totales_trigger ON COMANDA;


SELECT * FROM COMANDA;

INSERT INTO COMANDA (FOLIO, DIA, HORA, CANTIDADPARCIAL_ARTICULO, TOTAL_COMANDA, NO_EMPLEADO, FOLIO_FACTURA)
VALUES ('004', '15', '15:00:00', 2, 25.00, 1, 'F003');

SELECT * FROM FACTURA;
SELECT * FROM PERTENECE;
SELECT * FROM COMANDA;
SELECT * FROM PRODUCTO;

INSERT INTO PERTENECE VALUES (4,'004',);

INSERT INTO PRODUCTO (ID_PRODUCTO, PRECIO_ARTICULO, DESCRIPCION, RECETA, DISPONIBILIDAD, NOMBRE_PROD, NOMBRE_CAT, TIPO) 
VALUES (7, 3.50, 'Jugo de naranja', NULL, 10, 'Jugo de naranja', 'Bebida', 'B');

INSERT INTO BEBIDA (ID_PRODUCTO) 
VALUES (7);

INSERT INTO COMANDA (FOLIO, DIA, HORA, CANTIDADPARCIAL_ARTICULO, TOTAL_COMANDA, NO_EMPLEADO, FOLIO_FACTURA)
VALUES ('006', '15', '15:00:00', 2, 0.00, 1, 'F001');
-------------------------------------------------------------------
--Punto 1 Proyecto--

CREATE OR REPLACE FUNCTION actualizar_totales_comanda()
RETURNS TRIGGER AS $$
BEGIN
    -- Calcular el total parcial por producto y actualizar en la tabla PRODUCTO
    UPDATE PRODUCTO
    SET DISPONIBILIDAD = DISPONIBILIDAD - NEW.cantidadParcial_articulo
    WHERE ID_PRODUCTO = ID_PRODUCTO;

    -- Calcular el total de la comanda y actualizar en la tabla COMANDA
    UPDATE COMANDA
    SET TOTAL_COMANDA = (
        SELECT SUM(TOTAL_PARCIAL_COMANDA)
        FROM PERTENECE
        WHERE FOLIO = NEW.FOLIO
    )
    WHERE FOLIO = NEW.FOLIO;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER actualizar_totales_trigger
AFTER INSERT ON COMANDA
FOR EACH ROW
EXECUTE FUNCTION actualizar_totales_comanda();

DROP TRIGGER actualizar_totales_trigger ON COMANDA;
------------------------------------------------------
--Punto 2 Proyecto------------
CREATE INDEX idx_comanda_dia ON comanda(dia);
SELECT * FROM comanda
WHERE dia = '15';

---------------------------------
--Punto 3 proyecto
WITH MeseroCheck AS (
    SELECT NO_EMPLEADO
    FROM MESERO
    WHERE NO_EMPLEADO = 2 -- Aquí colocas el número de empleado que estás verificando
)
SELECT
    CASE
        WHEN m.NO_EMPLEADO IS NULL THEN 'Error: El empleado no es un mesero'
        ELSE CONCAT('Cantidad de órdenes: ', COALESCE(c.cantidad_ordenes, 0), ', Total pagado: ', COALESCE(c.total_pagado, 0))
    END AS resultado
FROM
    (SELECT 1 AS check_exists) AS dummy
LEFT JOIN
    MeseroCheck m ON dummy.check_exists = 2
LEFT JOIN
    (
        SELECT
            NO_EMPLEADO,
            COUNT(*) AS cantidad_ordenes,
            SUM(TOTAL_COMANDA) AS total_pagado
        FROM
            COMANDA
        WHERE
            NO_EMPLEADO = 2 -- Aquí colocas el número de empleado que estás verificando
            AND DIA = '15' -- Aquí colocas el día específico
        GROUP BY
            NO_EMPLEADO
    ) AS c ON m.NO_EMPLEADO = c.NO_EMPLEADO;

SELECT * FROM EMPLEADO;
SELECT * FROM MESERO;

-------------------------------------
--Punto 4 Proyecto
CREATE OR REPLACE VIEW PlatilloMasVendido AS
WITH PlatilloVentas AS (
SELECT p.ID_PRODUCTO, p.NOMBRE_PROD, SUM(c.CANTIDADPARCIAL_ARTICULO) AS TotalVendido
FROM COMANDA c 
	JOIN PERTENECE pe ON c.FOLIO = pe.FOLIO
	JOIN PRODUCTO p ON pe.ID_PRODUCTO = p.ID_PRODUCTO
    JOIN PLATILLO pl ON p.ID_PRODUCTO = pl.ID_PRODUCTO
GROUP BY p.ID_PRODUCTO, p.NOMBRE_PROD),
MaxVenta AS (
    SELECT MAX(TotalVendido) AS MaxVendido
	FROM PlatilloVentas)
SELECT p.*
FROM PRODUCTO p
JOIN PlatilloVentas pv ON p.ID_PRODUCTO = pv.ID_PRODUCTO
JOIN MaxVenta mv ON pv.TotalVendido = mv.MaxVendido
WHERE p.ID_PRODUCTO IN (SELECT pl.ID_PRODUCTO FROM PLATILLO pl);

-- Insertar nuevos productos que sean platillos
INSERT INTO PRODUCTO (ID_PRODUCTO, PRECIO_ARTICULO, DESCRIPCION, RECETA, DISPONIBILIDAD, NOMBRE_PROD, NOMBRE_CAT, TIPO) 
VALUES 
(8, 18.50, 'Mole Poblano', 'Receta de mole poblano...', 100, 'Mole Poblano', 'Platillo', 'P'),
(9, 14.99, 'Chiles en Nogada', 'Receta de chiles en nogada...', 100, 'Chiles en Nogada', 'Platillo', 'P');

-- Insertar en la tabla PLATILLO
INSERT INTO PLATILLO (ID_PRODUCTO) 
VALUES 
(8),
(9);

-- Insertar nuevas facturas
INSERT INTO FACTURA (FOLIO_FACTURA, DOMICILIO_FISCAL, RAZON_SOCIAL, RFC)
VALUES 
('F004', 'Calle Secundaria 456, Ciudad', 'Restaurante DEF', 'JKL987654321'),
('F005', 'Av. Revolución 789, Pueblo', 'Restaurante GHI', 'MNO123456789');

-- Insertar nuevas comandas
INSERT INTO COMANDA (FOLIO, DIA, HORA, CANTIDADPARCIAL_ARTICULO, TOTAL_COMANDA, NO_EMPLEADO, FOLIO_FACTURA)
VALUES 
('009', '15', '16:30:00', 4, 74.00, 1, 'F004'),  -- 4 Mole Poblano
('0025', '15', '17:45:00', 2, 29.98, 2, 'F005');  -- 2 Chiles en Nogada

-- Insertar nuevos registros en pertenece
INSERT INTO PERTENECE (ID_PRODUCTO, FOLIO, TOTAL_PARCIAL_COMANDA)
VALUES 
(8, '009', 74.00),  -- 4 Mole Poblano a 18.50 cada uno
(9, '0025', 29.98);  -- 2 Chiles en Nogada a 14.99 cada uno

SELECT * FROM PlatilloMasVendido

------------------------------------------------------------------------------
--Punto 5 Proyecto

SELECT NOMBRE_PROD
FROM PRODUCTO
WHERE DISPONIBILIDAD = 0;
-------------------------------------------------------
--Punto 6 Proyecto

CREATE VIEW Vista_Factura_Orden AS
SELECT c.FOLIO AS Folio_Orden,
       c.DIA AS Dia_Orden,
       c.HORA AS Hora_Orden,
       c.CANTIDADPARCIAL_ARTICULO AS Cantidad_Articulo,
       c.TOTAL_COMANDA AS Total_Comanda,
       c.NO_EMPLEADO AS Numero_Empleado,
       f.FOLIO_FACTURA AS Folio_Factura,
       f.DOMICILIO_FISCAL AS Domicilio_Fiscal,
       f.RAZON_SOCIAL AS Razon_Social,
       f.RFC AS RFC
FROM COMANDA c
JOIN FACTURA f ON c.FOLIO_FACTURA = f.FOLIO_FACTURA;

SELECT * FROM Vista_Factura_Orden;
--------------------------------------------
--Punto 7 Proyecto
SELECT 
    COUNT(*) AS Total_Ventas,
    SUM(C.CANTIDADPARCIAL_ARTICULO * PR.PRECIO_ARTICULO) AS Monto_Total_Ventas
FROM 
    COMANDA C
JOIN 
    PERTENECE PE ON C.FOLIO = PE.FOLIO
JOIN 
    PRODUCTO PR ON PE.ID_PRODUCTO = PR.ID_PRODUCTO
WHERE 
    C.DIA BETWEEN '15' AND '15';
-----------------------------------------------------------




